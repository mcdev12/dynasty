// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fantasy_teams.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFantasyTeam = `-- name: CreateFantasyTeam :one
INSERT INTO fantasy_teams (
    id,
    league_id,
    owner_id,
    name,
    logo_url,
    created_at
) VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW()
) RETURNING id, league_id, owner_id, name, logo_url, created_at
`

type CreateFantasyTeamParams struct {
	LeagueID uuid.UUID      `json:"league_id"`
	OwnerID  uuid.UUID      `json:"owner_id"`
	Name     string         `json:"name"`
	LogoUrl  sql.NullString `json:"logo_url"`
}

func (q *Queries) CreateFantasyTeam(ctx context.Context, arg CreateFantasyTeamParams) (FantasyTeam, error) {
	row := q.db.QueryRowContext(ctx, createFantasyTeam,
		arg.LeagueID,
		arg.OwnerID,
		arg.Name,
		arg.LogoUrl,
	)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.OwnerID,
		&i.Name,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFantasyTeam = `-- name: DeleteFantasyTeam :exec
DELETE FROM fantasy_teams WHERE id = $1
`

func (q *Queries) DeleteFantasyTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFantasyTeam, id)
	return err
}

const getFantasyTeam = `-- name: GetFantasyTeam :one
SELECT id, league_id, owner_id, name, logo_url, created_at FROM fantasy_teams WHERE id = $1
`

func (q *Queries) GetFantasyTeam(ctx context.Context, id uuid.UUID) (FantasyTeam, error) {
	row := q.db.QueryRowContext(ctx, getFantasyTeam, id)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.OwnerID,
		&i.Name,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getFantasyTeamByLeagueAndOwner = `-- name: GetFantasyTeamByLeagueAndOwner :one
SELECT id, league_id, owner_id, name, logo_url, created_at FROM fantasy_teams WHERE owner_id = $1 and league_id = $2
`

type GetFantasyTeamByLeagueAndOwnerParams struct {
	OwnerID  uuid.UUID `json:"owner_id"`
	LeagueID uuid.UUID `json:"league_id"`
}

func (q *Queries) GetFantasyTeamByLeagueAndOwner(ctx context.Context, arg GetFantasyTeamByLeagueAndOwnerParams) (FantasyTeam, error) {
	row := q.db.QueryRowContext(ctx, getFantasyTeamByLeagueAndOwner, arg.OwnerID, arg.LeagueID)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.OwnerID,
		&i.Name,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getFantasyTeamsByLeague = `-- name: GetFantasyTeamsByLeague :many
SELECT id, league_id, owner_id, name, logo_url, created_at FROM fantasy_teams WHERE league_id = $1
`

func (q *Queries) GetFantasyTeamsByLeague(ctx context.Context, leagueID uuid.UUID) ([]FantasyTeam, error) {
	rows, err := q.db.QueryContext(ctx, getFantasyTeamsByLeague, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FantasyTeam
	for rows.Next() {
		var i FantasyTeam
		if err := rows.Scan(
			&i.ID,
			&i.LeagueID,
			&i.OwnerID,
			&i.Name,
			&i.LogoUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFantasyTeamsByOwner = `-- name: GetFantasyTeamsByOwner :many
SELECT id, league_id, owner_id, name, logo_url, created_at FROM fantasy_teams WHERE owner_id = $1
`

func (q *Queries) GetFantasyTeamsByOwner(ctx context.Context, ownerID uuid.UUID) ([]FantasyTeam, error) {
	rows, err := q.db.QueryContext(ctx, getFantasyTeamsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FantasyTeam
	for rows.Next() {
		var i FantasyTeam
		if err := rows.Scan(
			&i.ID,
			&i.LeagueID,
			&i.OwnerID,
			&i.Name,
			&i.LogoUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFantasyTeam = `-- name: UpdateFantasyTeam :one
UPDATE fantasy_teams SET
    name = $2,
    logo_url = $3
WHERE id = $1
RETURNING id, league_id, owner_id, name, logo_url, created_at
`

type UpdateFantasyTeamParams struct {
	ID      uuid.UUID      `json:"id"`
	Name    string         `json:"name"`
	LogoUrl sql.NullString `json:"logo_url"`
}

func (q *Queries) UpdateFantasyTeam(ctx context.Context, arg UpdateFantasyTeamParams) (FantasyTeam, error) {
	row := q.db.QueryRowContext(ctx, updateFantasyTeam, arg.ID, arg.Name, arg.LogoUrl)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.OwnerID,
		&i.Name,
		&i.LogoUrl,
		&i.CreatedAt,
	)
	return i, err
}
