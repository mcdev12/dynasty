// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    id,
    sport_id,
    external_id,
    name,
    code,
    city,
    coach,
    owner,
    stadium,
    established_year
) VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) RETURNING id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at
`

type CreateTeamParams struct {
	SportID         string      `json:"sport_id"`
	ExternalID      string      `json:"external_id"`
	Name            string      `json:"name"`
	Code            string      `json:"code"`
	City            string      `json:"city"`
	Coach           pgtype.Text `json:"coach"`
	Owner           pgtype.Text `json:"owner"`
	Stadium         pgtype.Text `json:"stadium"`
	EstablishedYear pgtype.Int4 `json:"established_year"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.SportID,
		arg.ExternalID,
		arg.Name,
		arg.Code,
		arg.City,
		arg.Coach,
		arg.Owner,
		arg.Stadium,
		arg.EstablishedYear,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.Name,
		&i.Code,
		&i.City,
		&i.Coach,
		&i.Owner,
		&i.Stadium,
		&i.EstablishedYear,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at FROM teams WHERE id = $1
`

func (q *Queries) GetTeam(ctx context.Context, id pgtype.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.Name,
		&i.Code,
		&i.City,
		&i.Coach,
		&i.Owner,
		&i.Stadium,
		&i.EstablishedYear,
		&i.CreatedAt,
	)
	return i, err
}

const getTeamByExternalID = `-- name: GetTeamByExternalID :one
SELECT id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at FROM teams WHERE sport_id = $1 AND external_id = $2
`

type GetTeamByExternalIDParams struct {
	SportID    string `json:"sport_id"`
	ExternalID string `json:"external_id"`
}

func (q *Queries) GetTeamByExternalID(ctx context.Context, arg GetTeamByExternalIDParams) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamByExternalID, arg.SportID, arg.ExternalID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.Name,
		&i.Code,
		&i.City,
		&i.Coach,
		&i.Owner,
		&i.Stadium,
		&i.EstablishedYear,
		&i.CreatedAt,
	)
	return i, err
}

const listAllTeams = `-- name: ListAllTeams :many
SELECT id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at FROM teams ORDER BY sport_id, name
`

func (q *Queries) ListAllTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, listAllTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.SportID,
			&i.ExternalID,
			&i.Name,
			&i.Code,
			&i.City,
			&i.Coach,
			&i.Owner,
			&i.Stadium,
			&i.EstablishedYear,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamsBySport = `-- name: ListTeamsBySport :many
SELECT id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at FROM teams WHERE sport_id = $1 ORDER BY name
`

func (q *Queries) ListTeamsBySport(ctx context.Context, sportID string) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeamsBySport, sportID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.SportID,
			&i.ExternalID,
			&i.Name,
			&i.Code,
			&i.City,
			&i.Coach,
			&i.Owner,
			&i.Stadium,
			&i.EstablishedYear,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams SET
    name = $2,
    code = $3,
    city = $4,
    coach = $5,
    owner = $6,
    stadium = $7,
    established_year = $8
WHERE id = $1
RETURNING id, sport_id, external_id, name, code, city, coach, owner, stadium, established_year, created_at
`

type UpdateTeamParams struct {
	ID              pgtype.UUID `json:"id"`
	Name            string      `json:"name"`
	Code            string      `json:"code"`
	City            string      `json:"city"`
	Coach           pgtype.Text `json:"coach"`
	Owner           pgtype.Text `json:"owner"`
	Stadium         pgtype.Text `json:"stadium"`
	EstablishedYear pgtype.Int4 `json:"established_year"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.City,
		arg.Coach,
		arg.Owner,
		arg.Stadium,
		arg.EstablishedYear,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.Name,
		&i.Code,
		&i.City,
		&i.Coach,
		&i.Owner,
		&i.Stadium,
		&i.EstablishedYear,
		&i.CreatedAt,
	)
	return i, err
}
