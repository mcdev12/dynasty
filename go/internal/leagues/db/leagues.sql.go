// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: leagues.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createLeague = `-- name: CreateLeague :one
INSERT INTO leagues (
    name,
    sport_id,
    league_type,
    commissioner_id,
    league_settings,
    status,
    season
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at
`

type CreateLeagueParams struct {
	Name           string          `json:"name"`
	SportID        string          `json:"sport_id"`
	LeagueType     LeagueType      `json:"league_type"`
	CommissionerID uuid.UUID       `json:"commissioner_id"`
	LeagueSettings json.RawMessage `json:"league_settings"`
	Status         LeagueStatus    `json:"status"`
	Season         string          `json:"season"`
}

func (q *Queries) CreateLeague(ctx context.Context, arg CreateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, createLeague,
		arg.Name,
		arg.SportID,
		arg.LeagueType,
		arg.CommissionerID,
		arg.LeagueSettings,
		arg.Status,
		arg.Season,
	)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SportID,
		&i.LeagueType,
		&i.CommissionerID,
		&i.LeagueSettings,
		&i.Status,
		&i.Season,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLeague = `-- name: DeleteLeague :exec
DELETE FROM leagues WHERE id = $1
`

func (q *Queries) DeleteLeague(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLeague, id)
	return err
}

const getLeague = `-- name: GetLeague :one
SELECT id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at FROM leagues WHERE id = $1
`

func (q *Queries) GetLeague(ctx context.Context, id uuid.UUID) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeague, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SportID,
		&i.LeagueType,
		&i.CommissionerID,
		&i.LeagueSettings,
		&i.Status,
		&i.Season,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLeaguesByCommissioner = `-- name: GetLeaguesByCommissioner :many
SELECT id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at FROM leagues WHERE commissioner_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetLeaguesByCommissioner(ctx context.Context, commissionerID uuid.UUID) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, getLeaguesByCommissioner, commissionerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []League
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SportID,
			&i.LeagueType,
			&i.CommissionerID,
			&i.LeagueSettings,
			&i.Status,
			&i.Season,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeague = `-- name: UpdateLeague :one
UPDATE leagues SET
    name = $2,
    sport_id = $3,
    league_type = $4,
    commissioner_id = $5,
    league_settings = $6,
    status = $7,
    season = $8,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at
`

type UpdateLeagueParams struct {
	ID             uuid.UUID       `json:"id"`
	Name           string          `json:"name"`
	SportID        string          `json:"sport_id"`
	LeagueType     LeagueType      `json:"league_type"`
	CommissionerID uuid.UUID       `json:"commissioner_id"`
	LeagueSettings json.RawMessage `json:"league_settings"`
	Status         LeagueStatus    `json:"status"`
	Season         string          `json:"season"`
}

func (q *Queries) UpdateLeague(ctx context.Context, arg UpdateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeague,
		arg.ID,
		arg.Name,
		arg.SportID,
		arg.LeagueType,
		arg.CommissionerID,
		arg.LeagueSettings,
		arg.Status,
		arg.Season,
	)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SportID,
		&i.LeagueType,
		&i.CommissionerID,
		&i.LeagueSettings,
		&i.Status,
		&i.Season,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLeagueSettings = `-- name: UpdateLeagueSettings :one
UPDATE leagues SET
    league_settings = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at
`

type UpdateLeagueSettingsParams struct {
	ID             uuid.UUID       `json:"id"`
	LeagueSettings json.RawMessage `json:"league_settings"`
}

func (q *Queries) UpdateLeagueSettings(ctx context.Context, arg UpdateLeagueSettingsParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeagueSettings, arg.ID, arg.LeagueSettings)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SportID,
		&i.LeagueType,
		&i.CommissionerID,
		&i.LeagueSettings,
		&i.Status,
		&i.Season,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLeagueStatus = `-- name: UpdateLeagueStatus :one
UPDATE leagues SET
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, sport_id, league_type, commissioner_id, league_settings, status, season, created_at, updated_at
`

type UpdateLeagueStatusParams struct {
	ID     uuid.UUID    `json:"id"`
	Status LeagueStatus `json:"status"`
}

func (q *Queries) UpdateLeagueStatus(ctx context.Context, arg UpdateLeagueStatusParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeagueStatus, arg.ID, arg.Status)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SportID,
		&i.LeagueType,
		&i.CommissionerID,
		&i.LeagueSettings,
		&i.Status,
		&i.Season,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
