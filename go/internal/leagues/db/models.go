// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type LeagueStatus string

const (
	LeagueStatusPENDING   LeagueStatus = "PENDING"
	LeagueStatusACTIVE    LeagueStatus = "ACTIVE"
	LeagueStatusCOMPLETED LeagueStatus = "COMPLETED"
	LeagueStatusCANCELLED LeagueStatus = "CANCELLED"
)

func (e *LeagueStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LeagueStatus(s)
	case string:
		*e = LeagueStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for LeagueStatus: %T", src)
	}
	return nil
}

type NullLeagueStatus struct {
	LeagueStatus LeagueStatus `json:"league_status"`
	Valid        bool         `json:"valid"` // Valid is true if LeagueStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLeagueStatus) Scan(value interface{}) error {
	if value == nil {
		ns.LeagueStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LeagueStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLeagueStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LeagueStatus), nil
}

type LeagueType string

const (
	LeagueTypeREDRAFT LeagueType = "REDRAFT"
	LeagueTypeKEEPER  LeagueType = "KEEPER"
	LeagueTypeDYNASTY LeagueType = "DYNASTY"
)

func (e *LeagueType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LeagueType(s)
	case string:
		*e = LeagueType(s)
	default:
		return fmt.Errorf("unsupported scan type for LeagueType: %T", src)
	}
	return nil
}

type NullLeagueType struct {
	LeagueType LeagueType `json:"league_type"`
	Valid      bool       `json:"valid"` // Valid is true if LeagueType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLeagueType) Scan(value interface{}) error {
	if value == nil {
		ns.LeagueType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LeagueType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLeagueType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LeagueType), nil
}

type League struct {
	ID             uuid.UUID       `json:"id"`
	Name           string          `json:"name"`
	SportID        string          `json:"sport_id"`
	LeagueType     LeagueType      `json:"league_type"`
	CommissionerID uuid.UUID       `json:"commissioner_id"`
	LeagueSettings json.RawMessage `json:"league_settings"`
	Status         LeagueStatus    `json:"status"`
	Season         string          `json:"season"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

type NflPlayerProfile struct {
	PlayerID     uuid.UUID      `json:"player_id"`
	Position     sql.NullString `json:"position"`
	Status       sql.NullString `json:"status"`
	College      sql.NullString `json:"college"`
	JerseyNumber sql.NullInt16  `json:"jersey_number"`
	Experience   sql.NullInt16  `json:"experience"`
	BirthDate    sql.NullTime   `json:"birth_date"`
	HeightCm     sql.NullInt32  `json:"height_cm"`
	WeightKg     sql.NullInt32  `json:"weight_kg"`
	HeightDesc   sql.NullString `json:"height_desc"`
	WeightDesc   sql.NullString `json:"weight_desc"`
}

type Player struct {
	ID         uuid.UUID     `json:"id"`
	SportID    string        `json:"sport_id"`
	ExternalID string        `json:"external_id"`
	FullName   string        `json:"full_name"`
	TeamID     uuid.NullUUID `json:"team_id"`
	CreatedAt  time.Time     `json:"created_at"`
}

type Sport struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	PluginKey string    `json:"plugin_key"`
	CreatedAt time.Time `json:"created_at"`
}

type Team struct {
	ID              uuid.UUID      `json:"id"`
	SportID         string         `json:"sport_id"`
	ExternalID      string         `json:"external_id"`
	Name            string         `json:"name"`
	Code            string         `json:"code"`
	City            string         `json:"city"`
	Coach           sql.NullString `json:"coach"`
	Owner           sql.NullString `json:"owner"`
	Stadium         sql.NullString `json:"stadium"`
	EstablishedYear sql.NullInt32  `json:"established_year"`
	CreatedAt       time.Time      `json:"created_at"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}
