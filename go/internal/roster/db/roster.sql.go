// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roster.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createRoster = `-- name: CreateRoster :one
INSERT INTO roster (
    id,
    fantasy_team_id,
    player_id,
    position,
    acquired_at,
    acquisition_type,
    keeper_data
) VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    NOW(),
    $4,
    $5
) RETURNING id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data
`

type CreateRosterParams struct {
	FantasyTeamID   uuid.UUID             `json:"fantasy_team_id"`
	PlayerID        uuid.UUID             `json:"player_id"`
	Position        RosterPositionEnum    `json:"position"`
	AcquisitionType AcquisitionTypeEnum   `json:"acquisition_type"`
	KeeperData      pqtype.NullRawMessage `json:"keeper_data"`
}

func (q *Queries) CreateRoster(ctx context.Context, arg CreateRosterParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, createRoster,
		arg.FantasyTeamID,
		arg.PlayerID,
		arg.Position,
		arg.AcquisitionType,
		arg.KeeperData,
	)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const deletePlayerFromRoster = `-- name: DeletePlayerFromRoster :exec
DELETE FROM roster 
WHERE fantasy_team_id = $1 AND player_id = $2
`

type DeletePlayerFromRosterParams struct {
	FantasyTeamID uuid.UUID `json:"fantasy_team_id"`
	PlayerID      uuid.UUID `json:"player_id"`
}

func (q *Queries) DeletePlayerFromRoster(ctx context.Context, arg DeletePlayerFromRosterParams) error {
	_, err := q.db.ExecContext(ctx, deletePlayerFromRoster, arg.FantasyTeamID, arg.PlayerID)
	return err
}

const deleteRosterEntry = `-- name: DeleteRosterEntry :exec
DELETE FROM roster WHERE id = $1
`

func (q *Queries) DeleteRosterEntry(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRosterEntry, id)
	return err
}

const deleteTeamRoster = `-- name: DeleteTeamRoster :exec
DELETE FROM roster WHERE fantasy_team_id = $1
`

func (q *Queries) DeleteTeamRoster(ctx context.Context, fantasyTeamID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTeamRoster, fantasyTeamID)
	return err
}

const getBenchRosterPlayers = `-- name: GetBenchRosterPlayers :many
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster 
WHERE fantasy_team_id = $1 AND position = 'BENCH'
ORDER BY acquired_at
`

func (q *Queries) GetBenchRosterPlayers(ctx context.Context, fantasyTeamID uuid.UUID) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getBenchRosterPlayers, fantasyTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.FantasyTeamID,
			&i.PlayerID,
			&i.Position,
			&i.AcquiredAt,
			&i.AcquisitionType,
			&i.KeeperData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerOnRoster = `-- name: GetPlayerOnRoster :one
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster 
WHERE fantasy_team_id = $1 AND player_id = $2
`

type GetPlayerOnRosterParams struct {
	FantasyTeamID uuid.UUID `json:"fantasy_team_id"`
	PlayerID      uuid.UUID `json:"player_id"`
}

func (q *Queries) GetPlayerOnRoster(ctx context.Context, arg GetPlayerOnRosterParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, getPlayerOnRoster, arg.FantasyTeamID, arg.PlayerID)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const getRoster = `-- name: GetRoster :one
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster WHERE id = $1
`

func (q *Queries) GetRoster(ctx context.Context, id uuid.UUID) (Roster, error) {
	row := q.db.QueryRowContext(ctx, getRoster, id)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const getRosterPlayersByAcquisitionType = `-- name: GetRosterPlayersByAcquisitionType :many
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster 
WHERE fantasy_team_id = $1 AND acquisition_type = $2
ORDER BY acquired_at
`

type GetRosterPlayersByAcquisitionTypeParams struct {
	FantasyTeamID   uuid.UUID           `json:"fantasy_team_id"`
	AcquisitionType AcquisitionTypeEnum `json:"acquisition_type"`
}

func (q *Queries) GetRosterPlayersByAcquisitionType(ctx context.Context, arg GetRosterPlayersByAcquisitionTypeParams) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getRosterPlayersByAcquisitionType, arg.FantasyTeamID, arg.AcquisitionType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.FantasyTeamID,
			&i.PlayerID,
			&i.Position,
			&i.AcquiredAt,
			&i.AcquisitionType,
			&i.KeeperData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRosterPlayersByFantasyTeam = `-- name: GetRosterPlayersByFantasyTeam :many
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster WHERE fantasy_team_id = $1
ORDER BY position, acquired_at
`

func (q *Queries) GetRosterPlayersByFantasyTeam(ctx context.Context, fantasyTeamID uuid.UUID) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getRosterPlayersByFantasyTeam, fantasyTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.FantasyTeamID,
			&i.PlayerID,
			&i.Position,
			&i.AcquiredAt,
			&i.AcquisitionType,
			&i.KeeperData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRosterPlayersByFantasyTeamAndPosition = `-- name: GetRosterPlayersByFantasyTeamAndPosition :many
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster 
WHERE fantasy_team_id = $1 AND position = $2
ORDER BY acquired_at
`

type GetRosterPlayersByFantasyTeamAndPositionParams struct {
	FantasyTeamID uuid.UUID          `json:"fantasy_team_id"`
	Position      RosterPositionEnum `json:"position"`
}

func (q *Queries) GetRosterPlayersByFantasyTeamAndPosition(ctx context.Context, arg GetRosterPlayersByFantasyTeamAndPositionParams) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getRosterPlayersByFantasyTeamAndPosition, arg.FantasyTeamID, arg.Position)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.FantasyTeamID,
			&i.PlayerID,
			&i.Position,
			&i.AcquiredAt,
			&i.AcquisitionType,
			&i.KeeperData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStartingRosterPlayers = `-- name: GetStartingRosterPlayers :many
SELECT id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data FROM roster 
WHERE fantasy_team_id = $1 AND position = 'STARTER'
ORDER BY acquired_at
`

func (q *Queries) GetStartingRosterPlayers(ctx context.Context, fantasyTeamID uuid.UUID) ([]Roster, error) {
	rows, err := q.db.QueryContext(ctx, getStartingRosterPlayers, fantasyTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roster
	for rows.Next() {
		var i Roster
		if err := rows.Scan(
			&i.ID,
			&i.FantasyTeamID,
			&i.PlayerID,
			&i.Position,
			&i.AcquiredAt,
			&i.AcquisitionType,
			&i.KeeperData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const transferPlayerToTeam = `-- name: TransferPlayerToTeam :one
UPDATE roster SET
    fantasy_team_id = $2,
    acquired_at = NOW(),
    acquisition_type = $3,
    keeper_data = $4
WHERE id = $1
RETURNING id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data
`

type TransferPlayerToTeamParams struct {
	ID              uuid.UUID             `json:"id"`
	FantasyTeamID   uuid.UUID             `json:"fantasy_team_id"`
	AcquisitionType AcquisitionTypeEnum   `json:"acquisition_type"`
	KeeperData      pqtype.NullRawMessage `json:"keeper_data"`
}

func (q *Queries) TransferPlayerToTeam(ctx context.Context, arg TransferPlayerToTeamParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, transferPlayerToTeam,
		arg.ID,
		arg.FantasyTeamID,
		arg.AcquisitionType,
		arg.KeeperData,
	)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const updateRosterPlayerKeeperData = `-- name: UpdateRosterPlayerKeeperData :one
UPDATE roster SET
    keeper_data = $2
WHERE id = $1
RETURNING id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data
`

type UpdateRosterPlayerKeeperDataParams struct {
	ID         uuid.UUID             `json:"id"`
	KeeperData pqtype.NullRawMessage `json:"keeper_data"`
}

func (q *Queries) UpdateRosterPlayerKeeperData(ctx context.Context, arg UpdateRosterPlayerKeeperDataParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, updateRosterPlayerKeeperData, arg.ID, arg.KeeperData)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const updateRosterPlayerPosition = `-- name: UpdateRosterPlayerPosition :one
UPDATE roster SET
    position = $2
WHERE id = $1
RETURNING id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data
`

type UpdateRosterPlayerPositionParams struct {
	ID       uuid.UUID          `json:"id"`
	Position RosterPositionEnum `json:"position"`
}

func (q *Queries) UpdateRosterPlayerPosition(ctx context.Context, arg UpdateRosterPlayerPositionParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, updateRosterPlayerPosition, arg.ID, arg.Position)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}

const updateRosterPositionAndKeeperData = `-- name: UpdateRosterPositionAndKeeperData :one
UPDATE roster SET
    position = $2,
    keeper_data = $3
WHERE id = $1
RETURNING id, fantasy_team_id, player_id, position, acquired_at, acquisition_type, keeper_data
`

type UpdateRosterPositionAndKeeperDataParams struct {
	ID         uuid.UUID             `json:"id"`
	Position   RosterPositionEnum    `json:"position"`
	KeeperData pqtype.NullRawMessage `json:"keeper_data"`
}

func (q *Queries) UpdateRosterPositionAndKeeperData(ctx context.Context, arg UpdateRosterPositionAndKeeperDataParams) (Roster, error) {
	row := q.db.QueryRowContext(ctx, updateRosterPositionAndKeeperData, arg.ID, arg.Position, arg.KeeperData)
	var i Roster
	err := row.Scan(
		&i.ID,
		&i.FantasyTeamID,
		&i.PlayerID,
		&i.Position,
		&i.AcquiredAt,
		&i.AcquisitionType,
		&i.KeeperData,
	)
	return i, err
}
