// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: player.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
    id,
    sport_id,
    external_id,
    full_name,
    team_id
) VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4
) RETURNING id, sport_id, external_id, full_name, team_id, created_at
`

type CreatePlayerParams struct {
	SportID    string        `json:"sport_id"`
	ExternalID string        `json:"external_id"`
	FullName   string        `json:"full_name"`
	TeamID     uuid.NullUUID `json:"team_id"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.SportID,
		arg.ExternalID,
		arg.FullName,
		arg.TeamID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.FullName,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, sport_id, external_id, full_name, team_id, created_at FROM players WHERE id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, id uuid.UUID) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.FullName,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerByExternalID = `-- name: GetPlayerByExternalID :one
SELECT id, sport_id, external_id, full_name, team_id, created_at FROM players WHERE sport_id = $1 AND external_id = $2
`

type GetPlayerByExternalIDParams struct {
	SportID    string `json:"sport_id"`
	ExternalID string `json:"external_id"`
}

func (q *Queries) GetPlayerByExternalID(ctx context.Context, arg GetPlayerByExternalIDParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByExternalID, arg.SportID, arg.ExternalID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.SportID,
		&i.ExternalID,
		&i.FullName,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}
