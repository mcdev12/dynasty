// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: draft.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createDraft = `-- name: CreateDraft :one
INSERT INTO draft (
    id,
    league_id,
    draft_type,
    status,
    settings,
    scheduled_at,
    created_at,
    updated_at
) VALUES (
             $1, -- id
             $2, -- league_id
             $3, -- draft_type
             $4, -- status
             $5, -- settings
             $6, -- scheduled_at
             NOW(),
             NOW()
         )
RETURNING id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at
`

type CreateDraftParams struct {
	ID          uuid.UUID       `json:"id"`
	LeagueID    uuid.UUID       `json:"league_id"`
	DraftType   DraftType       `json:"draft_type"`
	Status      DraftStatus     `json:"status"`
	Settings    json.RawMessage `json:"settings"`
	ScheduledAt sql.NullTime    `json:"scheduled_at"`
}

func (q *Queries) CreateDraft(ctx context.Context, arg CreateDraftParams) (Draft, error) {
	row := q.db.QueryRowContext(ctx, createDraft,
		arg.ID,
		arg.LeagueID,
		arg.DraftType,
		arg.Status,
		arg.Settings,
		arg.ScheduledAt,
	)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDraft = `-- name: DeleteDraft :exec
DELETE FROM draft
WHERE id = $1
  AND status = 'NOT_STARTED'
`

func (q *Queries) DeleteDraft(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDraft, id)
	return err
}

const getDraft = `-- name: GetDraft :one
SELECT id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at
FROM draft
WHERE id = $1
`

func (q *Queries) GetDraft(ctx context.Context, id uuid.UUID) (Draft, error) {
	row := q.db.QueryRowContext(ctx, getDraft, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDraftStatus = `-- name: UpdateDraftStatus :one
UPDATE draft
SET
    status = $2,
    started_at = CASE WHEN $2::text = 'IN_PROGRESS' THEN NOW() ELSE started_at END,
    completed_at = CASE WHEN $2::text = 'COMPLETED' THEN NOW() ELSE completed_at END,
    updated_at = NOW()
WHERE id = $1
RETURNING id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at
`

type UpdateDraftStatusParams struct {
	ID     uuid.UUID   `json:"id"`
	Status DraftStatus `json:"status"`
}

func (q *Queries) UpdateDraftStatus(ctx context.Context, arg UpdateDraftStatusParams) (Draft, error) {
	row := q.db.QueryRowContext(ctx, updateDraftStatus, arg.ID, arg.Status)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
