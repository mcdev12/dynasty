// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: draft.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const clearNextDeadline = `-- name: ClearNextDeadline :exec
UPDATE draft
SET next_deadline = NULL
WHERE id = $1
`

// Clear the deadline (e.g. when pausing or completing a draft).
func (q *Queries) ClearNextDeadline(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearNextDeadline, id)
	return err
}

const createDraft = `-- name: CreateDraft :one
INSERT INTO draft (
    id,
    league_id,
    draft_type,
    status,
    settings,
    scheduled_at,
    created_at,
    updated_at
) VALUES (
             $1, -- id
             $2, -- league_id
             $3, -- draft_type
             $4, -- status
             $5, -- settings
             $6, -- scheduled_at
             NOW(),
             NOW()
         )
RETURNING id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at, next_deadline
`

type CreateDraftParams struct {
	ID          uuid.UUID       `json:"id"`
	LeagueID    uuid.UUID       `json:"league_id"`
	DraftType   DraftType       `json:"draft_type"`
	Status      DraftStatus     `json:"status"`
	Settings    json.RawMessage `json:"settings"`
	ScheduledAt sql.NullTime    `json:"scheduled_at"`
}

func (q *Queries) CreateDraft(ctx context.Context, arg CreateDraftParams) (Draft, error) {
	row := q.db.QueryRowContext(ctx, createDraft,
		arg.ID,
		arg.LeagueID,
		arg.DraftType,
		arg.Status,
		arg.Settings,
		arg.ScheduledAt,
	)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextDeadline,
	)
	return i, err
}

const deleteDraft = `-- name: DeleteDraft :exec
DELETE FROM draft
WHERE id = $1
  AND status = 'NOT_STARTED'
`

func (q *Queries) DeleteDraft(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDraft, id)
	return err
}

const fetchDraftsDueForPick = `-- name: FetchDraftsDueForPick :many
SELECT
    id AS draft_id
FROM draft
WHERE status = 'IN_PROGRESS'
  AND next_deadline <= NOW()
ORDER BY next_deadline
LIMIT $1
    FOR UPDATE SKIP LOCKED
`

// Claim up to $1 drafts whose deadline has passed, locking them to avoid races.
func (q *Queries) FetchDraftsDueForPick(ctx context.Context, limit int32) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, fetchDraftsDueForPick, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var draft_id uuid.UUID
		if err := rows.Scan(&draft_id); err != nil {
			return nil, err
		}
		items = append(items, draft_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchNextDeadline = `-- name: FetchNextDeadline :one
SELECT
    id      AS draft_id,
    next_deadline
FROM draft
WHERE status = 'IN_PROGRESS'
ORDER BY next_deadline
LIMIT 1
`

type FetchNextDeadlineRow struct {
	DraftID      uuid.UUID    `json:"draft_id"`
	NextDeadline sql.NullTime `json:"next_deadline"`
}

// Fetch the single soonest deadline across all in-progress drafts.
func (q *Queries) FetchNextDeadline(ctx context.Context) (FetchNextDeadlineRow, error) {
	row := q.db.QueryRowContext(ctx, fetchNextDeadline)
	var i FetchNextDeadlineRow
	err := row.Scan(&i.DraftID, &i.NextDeadline)
	return i, err
}

const getDraft = `-- name: GetDraft :one
SELECT id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at, next_deadline
FROM draft
WHERE id = $1
`

func (q *Queries) GetDraft(ctx context.Context, id uuid.UUID) (Draft, error) {
	row := q.db.QueryRowContext(ctx, getDraft, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextDeadline,
	)
	return i, err
}

const updateDraft = `-- name: UpdateDraft :one
UPDATE draft
SET
    settings = COALESCE($2, settings),
    scheduled_at = COALESCE($3, scheduled_at),
    updated_at = NOW()
WHERE id = $1
RETURNING id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at, next_deadline
`

type UpdateDraftParams struct {
	ID          uuid.UUID       `json:"id"`
	Settings    json.RawMessage `json:"settings"`
	ScheduledAt sql.NullTime    `json:"scheduled_at"`
}

// Update draft settings and/or scheduled_at
func (q *Queries) UpdateDraft(ctx context.Context, arg UpdateDraftParams) (Draft, error) {
	row := q.db.QueryRowContext(ctx, updateDraft, arg.ID, arg.Settings, arg.ScheduledAt)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextDeadline,
	)
	return i, err
}

const updateDraftStatus = `-- name: UpdateDraftStatus :one
UPDATE draft
SET
    status = $2,
    started_at = CASE WHEN $2 = 'IN_PROGRESS'::draft_status THEN NOW() ELSE started_at END,
    completed_at = CASE WHEN $2 = 'COMPLETED'::draft_status THEN NOW() ELSE completed_at END,
    updated_at = NOW()
WHERE id = $1
RETURNING id, league_id, draft_type, status, settings, scheduled_at, started_at, completed_at, created_at, updated_at, next_deadline
`

type UpdateDraftStatusParams struct {
	ID     uuid.UUID   `json:"id"`
	Status DraftStatus `json:"status"`
}

func (q *Queries) UpdateDraftStatus(ctx context.Context, arg UpdateDraftStatusParams) (Draft, error) {
	row := q.db.QueryRowContext(ctx, updateDraftStatus, arg.ID, arg.Status)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.DraftType,
		&i.Status,
		&i.Settings,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NextDeadline,
	)
	return i, err
}

const updateNextDeadline = `-- name: UpdateNextDeadline :exec
UPDATE draft
SET next_deadline = $2
WHERE id = $1
`

type UpdateNextDeadlineParams struct {
	ID           uuid.UUID    `json:"id"`
	NextDeadline sql.NullTime `json:"next_deadline"`
}

// Set the next pick deadline for a draft (e.g. after a pick or resume).
func (q *Queries) UpdateNextDeadline(ctx context.Context, arg UpdateNextDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, updateNextDeadline, arg.ID, arg.NextDeadline)
	return err
}
