// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type AcquisitionTypeEnum string

const (
	AcquisitionTypeEnumDRAFT     AcquisitionTypeEnum = "DRAFT"
	AcquisitionTypeEnumWAIVER    AcquisitionTypeEnum = "WAIVER"
	AcquisitionTypeEnumFREEAGENT AcquisitionTypeEnum = "FREE_AGENT"
	AcquisitionTypeEnumTRADE     AcquisitionTypeEnum = "TRADE"
	AcquisitionTypeEnumKEEPER    AcquisitionTypeEnum = "KEEPER"
)

func (e *AcquisitionTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AcquisitionTypeEnum(s)
	case string:
		*e = AcquisitionTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AcquisitionTypeEnum: %T", src)
	}
	return nil
}

type NullAcquisitionTypeEnum struct {
	AcquisitionTypeEnum AcquisitionTypeEnum `json:"acquisition_type_enum"`
	Valid               bool                `json:"valid"` // Valid is true if AcquisitionTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAcquisitionTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.AcquisitionTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AcquisitionTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAcquisitionTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AcquisitionTypeEnum), nil
}

type DraftStatus string

const (
	DraftStatusNOTSTARTED DraftStatus = "NOT_STARTED"
	DraftStatusINPROGRESS DraftStatus = "IN_PROGRESS"
	DraftStatusPAUSED     DraftStatus = "PAUSED"
	DraftStatusCOMPLETED  DraftStatus = "COMPLETED"
	DraftStatusCANCELLED  DraftStatus = "CANCELLED"
)

func (e *DraftStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DraftStatus(s)
	case string:
		*e = DraftStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DraftStatus: %T", src)
	}
	return nil
}

type NullDraftStatus struct {
	DraftStatus DraftStatus `json:"draft_status"`
	Valid       bool        `json:"valid"` // Valid is true if DraftStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDraftStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DraftStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DraftStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDraftStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DraftStatus), nil
}

type DraftType string

const (
	DraftTypeSNAKE   DraftType = "SNAKE"
	DraftTypeAUCTION DraftType = "AUCTION"
	DraftTypeROOKIE  DraftType = "ROOKIE"
)

func (e *DraftType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DraftType(s)
	case string:
		*e = DraftType(s)
	default:
		return fmt.Errorf("unsupported scan type for DraftType: %T", src)
	}
	return nil
}

type NullDraftType struct {
	DraftType DraftType `json:"draft_type"`
	Valid     bool      `json:"valid"` // Valid is true if DraftType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDraftType) Scan(value interface{}) error {
	if value == nil {
		ns.DraftType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DraftType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDraftType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DraftType), nil
}

type LeagueStatus string

const (
	LeagueStatusPENDING   LeagueStatus = "PENDING"
	LeagueStatusACTIVE    LeagueStatus = "ACTIVE"
	LeagueStatusCOMPLETED LeagueStatus = "COMPLETED"
	LeagueStatusCANCELLED LeagueStatus = "CANCELLED"
)

func (e *LeagueStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LeagueStatus(s)
	case string:
		*e = LeagueStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for LeagueStatus: %T", src)
	}
	return nil
}

type NullLeagueStatus struct {
	LeagueStatus LeagueStatus `json:"league_status"`
	Valid        bool         `json:"valid"` // Valid is true if LeagueStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLeagueStatus) Scan(value interface{}) error {
	if value == nil {
		ns.LeagueStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LeagueStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLeagueStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LeagueStatus), nil
}

type LeagueType string

const (
	LeagueTypeREDRAFT LeagueType = "REDRAFT"
	LeagueTypeKEEPER  LeagueType = "KEEPER"
	LeagueTypeDYNASTY LeagueType = "DYNASTY"
)

func (e *LeagueType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LeagueType(s)
	case string:
		*e = LeagueType(s)
	default:
		return fmt.Errorf("unsupported scan type for LeagueType: %T", src)
	}
	return nil
}

type NullLeagueType struct {
	LeagueType LeagueType `json:"league_type"`
	Valid      bool       `json:"valid"` // Valid is true if LeagueType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLeagueType) Scan(value interface{}) error {
	if value == nil {
		ns.LeagueType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LeagueType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLeagueType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LeagueType), nil
}

type RosterPositionEnum string

const (
	RosterPositionEnumSTARTING RosterPositionEnum = "STARTING"
	RosterPositionEnumBENCH    RosterPositionEnum = "BENCH"
	RosterPositionEnumIR       RosterPositionEnum = "IR"
	RosterPositionEnumTAXI     RosterPositionEnum = "TAXI"
)

func (e *RosterPositionEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RosterPositionEnum(s)
	case string:
		*e = RosterPositionEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RosterPositionEnum: %T", src)
	}
	return nil
}

type NullRosterPositionEnum struct {
	RosterPositionEnum RosterPositionEnum `json:"roster_position_enum"`
	Valid              bool               `json:"valid"` // Valid is true if RosterPositionEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRosterPositionEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RosterPositionEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RosterPositionEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRosterPositionEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RosterPositionEnum), nil
}

type Draft struct {
	ID          uuid.UUID       `json:"id"`
	LeagueID    uuid.UUID       `json:"league_id"`
	DraftType   DraftType       `json:"draft_type"`
	Status      DraftStatus     `json:"status"`
	Settings    json.RawMessage `json:"settings"`
	ScheduledAt sql.NullTime    `json:"scheduled_at"`
	StartedAt   sql.NullTime    `json:"started_at"`
	CompletedAt sql.NullTime    `json:"completed_at"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

type DraftPick struct {
	ID            uuid.UUID      `json:"id"`
	DraftID       uuid.UUID      `json:"draft_id"`
	Round         int32          `json:"round"`
	Pick          int32          `json:"pick"`
	OverallPick   int32          `json:"overall_pick"`
	TeamID        uuid.UUID      `json:"team_id"`
	PlayerID      uuid.NullUUID  `json:"player_id"`
	PickedAt      sql.NullTime   `json:"picked_at"`
	AuctionAmount sql.NullString `json:"auction_amount"`
	KeeperPick    sql.NullBool   `json:"keeper_pick"`
}

type FantasyTeam struct {
	ID        uuid.UUID      `json:"id"`
	LeagueID  uuid.UUID      `json:"league_id"`
	OwnerID   uuid.UUID      `json:"owner_id"`
	Name      string         `json:"name"`
	LogoUrl   sql.NullString `json:"logo_url"`
	CreatedAt time.Time      `json:"created_at"`
}

type League struct {
	ID             uuid.UUID       `json:"id"`
	Name           string          `json:"name"`
	SportID        string          `json:"sport_id"`
	LeagueType     LeagueType      `json:"league_type"`
	CommissionerID uuid.UUID       `json:"commissioner_id"`
	LeagueSettings json.RawMessage `json:"league_settings"`
	Status         LeagueStatus    `json:"status"`
	Season         string          `json:"season"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

type NflPlayerProfile struct {
	PlayerID     uuid.UUID      `json:"player_id"`
	Position     sql.NullString `json:"position"`
	Status       sql.NullString `json:"status"`
	College      sql.NullString `json:"college"`
	JerseyNumber sql.NullInt16  `json:"jersey_number"`
	Experience   sql.NullInt16  `json:"experience"`
	BirthDate    sql.NullTime   `json:"birth_date"`
	HeightCm     sql.NullInt32  `json:"height_cm"`
	WeightKg     sql.NullInt32  `json:"weight_kg"`
	HeightDesc   sql.NullString `json:"height_desc"`
	WeightDesc   sql.NullString `json:"weight_desc"`
}

type Player struct {
	ID         uuid.UUID     `json:"id"`
	SportID    string        `json:"sport_id"`
	ExternalID string        `json:"external_id"`
	FullName   string        `json:"full_name"`
	TeamID     uuid.NullUUID `json:"team_id"`
	CreatedAt  time.Time     `json:"created_at"`
}

type RosterPlayer struct {
	ID              uuid.UUID             `json:"id"`
	FantasyTeamID   uuid.UUID             `json:"fantasy_team_id"`
	PlayerID        uuid.UUID             `json:"player_id"`
	Position        RosterPositionEnum    `json:"position"`
	AcquiredAt      time.Time             `json:"acquired_at"`
	AcquisitionType AcquisitionTypeEnum   `json:"acquisition_type"`
	KeeperData      pqtype.NullRawMessage `json:"keeper_data"`
}

type Sport struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	PluginKey string    `json:"plugin_key"`
	CreatedAt time.Time `json:"created_at"`
}

type Team struct {
	ID              uuid.UUID      `json:"id"`
	SportID         string         `json:"sport_id"`
	ExternalID      string         `json:"external_id"`
	Name            string         `json:"name"`
	Code            string         `json:"code"`
	City            string         `json:"city"`
	Coach           sql.NullString `json:"coach"`
	Owner           sql.NullString `json:"owner"`
	Stadium         sql.NullString `json:"stadium"`
	EstablishedYear sql.NullInt32  `json:"established_year"`
	CreatedAt       time.Time      `json:"created_at"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}
