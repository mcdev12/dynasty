// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const fetchUnsentOutbox = `-- name: FetchUnsentOutbox :many
SELECT id, draft_id, event_type, payload
FROM draft_outbox
WHERE sent_at IS NULL
ORDER BY created_at
LIMIT  $1
    FOR UPDATE SKIP LOCKED
`

type FetchUnsentOutboxRow struct {
	ID        uuid.UUID       `json:"id"`
	DraftID   uuid.UUID       `json:"draft_id"`
	EventType string          `json:"event_type"`
	Payload   json.RawMessage `json:"payload"`
}

func (q *Queries) FetchUnsentOutbox(ctx context.Context, limit int32) ([]FetchUnsentOutboxRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchUnsentOutbox, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchUnsentOutboxRow
	for rows.Next() {
		var i FetchUnsentOutboxRow
		if err := rows.Scan(
			&i.ID,
			&i.DraftID,
			&i.EventType,
			&i.Payload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOutboxPickMade = `-- name: InsertOutboxPickMade :exec
INSERT INTO draft_outbox (id, draft_id, event_type, payload)
VALUES ($1, $2, 'PickMade', $3)
`

type InsertOutboxPickMadeParams struct {
	ID      uuid.UUID       `json:"id"`
	DraftID uuid.UUID       `json:"draft_id"`
	Payload json.RawMessage `json:"payload"`
}

func (q *Queries) InsertOutboxPickMade(ctx context.Context, arg InsertOutboxPickMadeParams) error {
	_, err := q.db.ExecContext(ctx, insertOutboxPickMade, arg.ID, arg.DraftID, arg.Payload)
	return err
}

const markOutboxSent = `-- name: MarkOutboxSent :exec
UPDATE draft_outbox
SET sent_at = NOW()
WHERE id = ANY($1::uuid[])
`

func (q *Queries) MarkOutboxSent(ctx context.Context, ids []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markOutboxSent, pq.Array(ids))
	return err
}
